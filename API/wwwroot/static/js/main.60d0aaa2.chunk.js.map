{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/Home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetail.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","title","ActivityFormValues","undefined","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPredicate","value","resetPredicate","forEach","setPagingParams","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","val","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","bordered","circular","ActivityListItem","Segment","Group","Label","textAlign","ItemGroup","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErros","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","ProfileEditForm","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetail","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.60d0aaa2.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination){\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams{\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2){\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL; \r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            if(status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"'))            \r\n            {\r\n                store.userStore.logout();                \r\n                toast.error('Session expiered - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\n    export interface Activity {\r\n        id: string;\r\n        title: string;\r\n        date: Date | null;\r\n        description: string;\r\n        category: string;\r\n        city: string;\r\n        venue: string;\r\n        hostUsername: string;\r\n        isCancelled: boolean;\r\n        isGoing: boolean;\r\n        isHost: boolean;\r\n        host?: Profile;\r\n        attendees: Profile[];\r\n    }\r\n\r\n    export class Activity implements Activity {\r\n        constructor(init? : ActivityFormValues){\r\n            Object.assign(this.title, init);\r\n        }\r\n    }\r\n\r\n    export class ActivityFormValues {\r\n        id? : string = undefined;\r\n        title: string = '';\r\n        category: string = '';\r\n        description: string = '';\r\n        date: Date | null = null;\r\n        city: string = '';\r\n        venue: string = '';\r\n\r\n        constructor(activity?: ActivityFormValues) {\r\n            if(activity){\r\n                this.id = activity.id;\r\n                this.title = activity.title;\r\n                this.category = activity.category;\r\n                this.description = activity.description;\r\n                this.date = activity.date;\r\n                this.venue = activity.venue;\r\n                this.city = activity.city;\r\n            }\r\n        }\r\n    }","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import format from \"date-fns/format\";\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\nimport { Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ActivityStore {\n\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key)=> {\n                if(key!=='startDate') this.predicate.delete(key);\n            })\n        }\n\n        switch(predicate){\n            case 'all ': \n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                resetPredicate();\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n\n    setPagingParams = (pagingParams : PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((val, key) => {\n            if(key === 'startDate'){\n                params.append(key, (val as Date).toISOString())\n            }else{\n                params.append(key, val);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as { [key: string]: Activity[] })\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            this.setLoadingInitial(false);\n            console.log(error);\n        }\n    }\n\n    setPagination = (pagination : Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername)\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity)\n                    this.selectedActivity = activity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = { ...this.profile, ...profile as Profile };\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile?.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username :string, predicate? :string) => {\n        this.loadingActivities = true;\n        try{\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        }catch(error){\n            console.log(error);\n            runInAction(() => {\n                this.loadingActivities =false;\n            })\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n    fbAccessToken: string | null = null;\n    fbLoading = false;\n    refreshTokenTimeout: any;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n            runInAction(() => {\n                this.user = user;\n            })\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            this.startRefreshTokenTimer(user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n            runInAction(() => {\n                this.user = user;\n            })\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) {\n            this.user.image = image;\n        }\n    }\n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n\n    getFacebookLoginStatus = async () => {\n        window.FB.getLoginStatus(response => {\n            if (response.status === 'connected') {\n                this.fbAccessToken = response.authResponse.accessToken;\n            }\n        })\n    }\n\n    facebookLogin = () => {\n        this.fbLoading = true;\n        const apiLogin = (accessToken: string) => {\n            agent.Account.fbLogin(accessToken).then(user => {\n                store.commonStore.setToken(user.token);\n                this.startRefreshTokenTimer(user);\n                runInAction(() => {\n                    this.user = user;\n                    this.fbLoading = false;\n                })\n                history.push('/activities');\n            }).catch(error => {\n                console.log(error);\n                runInAction(() => this.fbLoading = false);\n            })\n        }\n        if (this.fbAccessToken) {\n            apiLogin(this.fbAccessToken);\n        } else {\n            window.FB.login(response => {\n                apiLogin(response.authResponse.accessToken);\n            }, { scope: 'public_profile,email' })\n        }\n    }\n\n    refreshToken = async () => {\n        this.stopRefreshTokenTimer();\n        try {\n            const user = await agent.Account.refreshToken();\n            runInAction(() => this.user = user);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    private startRefreshTokenTimer(user: User) {\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\n    }\n\n    private stopRefreshTokenTimer() {\n        clearTimeout(this.refreshTokenTimeout);\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore : ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n     activityStore: new ActivityStore(),\n     commonStore : new CommonStore(),\n     userStore: new UserStore(),\n     modalStore: new ModalStore(),\n     profileStore: new ProfileStore(),\n     commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n        //called with onChange event, auto run reaction is called every second. \n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the hub connection ' + error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            });\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => { \n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment); \n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} icon='power' text='Logout' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n}\r\n)\r\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Calendar from \"react-calendar\";\nimport { Menu, Header } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\n\nexport default observer(function ActivityFilters() {\n    const { activityStore: { predicate, setPredicate } } = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 27 }} >\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item\n                    content='All Activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Calendar\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            /> \n        </>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent } from \"react\";\nimport { Button, Reveal } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const { profileStore, userStore } = useStore();\n    const { updateFollowing, loading } = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move' >\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button \n                fluid \n                color='teal'\n                content={profile.following ? 'Following' : 'Not following' } />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button \n                fluid \n                basic \n                color={profile.following ? 'red' : 'green'}\n                content={profile.following ? 'Unfollow' : 'Follow'} \n                loading = {loading}\n                onClick = {(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Image, Icon } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard({profile}: Props){\n\n    function truncate(str: string | undefined){\n        if(str){\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content> \n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile = {profile}/>\n        </Card>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Image, List, Popup } from \"semantic-ui-react\";\nimport { Profile } from \"../../../app/models/profile\";\nimport ProfileCard from \"../../profiles/ProfileCard\";\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image\n                                style={attendee.following ? styles : null}\n                                bordered\n                                size='mini' circular src={attendee.image || '/assets/user.png'} />\n                        </List.Item>\n                    }>\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n            ))}\n        </List>\n    )\n})","import { format } from 'date-fns';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, ItemGroup, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled && \n                    <Label attached='top' color='red' content = 'Cancelled' style={{textAlign: 'center'}} /> \n                }\n                <ItemGroup>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={ activity.host?.image ||  '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}> {activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </ItemGroup>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red' >{meta.error}</Label>\n            ) : null} \n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Header, Label } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function LoginForm() {\n\n    const { userStore } = useStore();\n\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error => setErrors({ error: 'Invalid email or password' }))}\n        >\n            {({ handleSubmit, isSubmitting, errors }) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\n                    <MyTextInput name='email' placeholder='email' />\n                    <MyTextInput name='password' placeholder='password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() => \n                        <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\ninterface Props {\n    errors: any ;\n}\n\nexport default function ValidationErros({errors} : Props){\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err:any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Header } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\nimport ValidationErros from \"../errors/ValidationErrors\";\n\nexport default observer(function RegisterForm() {\n\n    const { userStore } = useStore();\n\n    return (\n        <Formik\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\n                setErrors({ error }))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required()\n            })}\n        >\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='SignUp to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='displayName' />\n                    <MyTextInput name='username' placeholder='username' />\n                    <MyTextInput name='email' placeholder='email' />\n                    <MyTextInput name='password' placeholder='password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() =>\n                            <ValidationErros errors = {errors.error} /> }\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {\n                    userStore.isLoggedIn ? (\n                        <>\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\n                            <Button as={Link} to='/activities' size='huge' inverted >\n                                Go to Activities!\n                            </Button>\n                        </>\n                    ) :\n                        (\n                            <>\n                                <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                                    Login!\n                                </Button>\n                                <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                                    Register!\n                                </Button>\n                                <Divider horizontal inverted>Or</Divider>\n                                <Button\n                                    size='huge'\n                                    loading = {userStore.fbLoading}\n                                    inverted\n                                    color ='facebook'\n                                    content ='Login with Facebook'\n                                    onClick = {userStore.facebookLogin}\n                                />\n                            </>\n                        )\n                }\n            </Container>\n        </Segment>\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted =true, content = 'Loading...'}: Props){\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content = {content} />\n        </Dimmer>\n    )\n}","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red' >{meta.error}</Label>\n            ) : null} \n        </Form.Field>\n    )\n}","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label, Select } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options = {props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red' >{meta.error}</Label>\n            ) : null} \n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    { text: 'Drinks', value: 'drinks'},\n    { text: 'Culture', value: 'culture'},\n    { text: 'Film', value: 'film'},\n    { text: 'Food', value: 'food'},\n    { text: 'Music', value: 'Music'},\n    { text: 'Travel', value: 'travel'},\n]","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange = {value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red' >{meta.error}</Label>\n            ) : null} \n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponents';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\nexport default observer(function ActivityForm() {\n\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('Activity title is required'),\n        description: Yup.string().required('Activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required.').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required()\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\n    }, [id, loadActivity])\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if(!activity.id){\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => {\n                history.push(`/activities/${newActivity.id}`)\n            })\n        }else{\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal'/>\n            <Formik validationSchema={validationSchema} enableReinitialize initialValues={activity} onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput placeholderText='Date' name='date' showTimeSelect timeCaption='Time' dateFormat = 'MMMM d, yyyy h:mm aa' />\n                        <Header content='Location Details' sub color='teal'/>\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button loading={isSubmitting} floated='right' positive type='submit' content='Submit' disabled={isSubmitting || !dirty || !isValid} />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    )\n})","import { Field, FieldProps, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body' >\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter you comment (Enter to submit, SHIFT + enter for the new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey)\n                                                    return;\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`} >{comment.displayName}</Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }} >{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n    return (\n         <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment style={activityImageTextStyle} basic>\n                        {/* <Item.Group> */} \n                         <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                /> \n                                 <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p> \n                            </Item.Content>\n                        </Item>\n                    {/* </Item.Group>  */}\n                </Segment> \n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button color='orange'\n                                disabled={activity.isCancelled} \n                                floated='right' \n                                as={Link} \n                                to={`/manage/${activity.id}`}>\n                            Manage Event\n                        </Button>\n                    </>\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance} >Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\n                )}\n            </Segment>  \n        </Segment.Group>\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} Going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>\n                            }\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n                                }\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n    )\n})\n","import { observer } from \"mobx-react-lite\"\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponents';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\n\nexport default observer(function ActivityDetail() {\n\n    const { activityStore } = useStore();\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore\n    const { id } = useParams<{ id: string }>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErros from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {\r\n                errors && \r\n                <ValidationErros errors = {errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\n\nexport default function NotFound(){\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Opps - we've looked everywhere and cound not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page.\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function ServerError() {\n    const { commonStore } = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {\n                commonStore.error?.details && \n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open = {modalStore.modal.open} onClose={modalStore.closeModal} size='mini' >\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\nimport { Button } from \"semantic-ui-react\";\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEdit({ setEditMode }: Props) {\n    const { profileStore: { profile, updateProfile } } = useStore();\n    return (\n        <Formik\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema = { Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n            {({isSubmitting, isValid, dirty}) => (\n                <Form className='ui form'>\n                    <MyTextInput placeholder='Display Name' name='displayName' />\n                    <MyTextArea rows={3} placeholder ='Add your bio' name ='bio' />\n                    <Button\n                        positive\n                        type='submit'\n                        loading ={isSubmitting}\n                        content = 'Update profile'\n                        floated ='right'\n                        disabled ={!isValid || !dirty} \n                    />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileEditForm from \"./ProfileEditForm\";\n\nexport default observer(function ProfileAbout() {\n    const { profileStore } = useStore();\n    const { isCurrentUser, profile } = profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16' >\n                    {editMode ? \n                    <ProfileEditForm setEditMode={setEditMode} /> : <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n\n})","import { observer } from \"mobx-react-lite\";\nimport { format } from \"date-fns\";\nimport React, { SyntheticEvent } from \"react\";\nimport { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Grid, Header, Tab, TabProps, Image} from \"semantic-ui-react\";\nimport { UserActivity } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    {menuItem: 'Future Events', pane: {key : 'future'}},\n    {menuItem: 'Pat Events', pane: {key : 'past'}},\n    {menuItem: 'Hosting', pane: {key : 'hosting'}},\n]\n\nexport default observer(function ProfileActivities(){\n    const {profileStore} = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile])\n\n    const handleTabChange = (e:SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    }\n\n    return (\n        <Tab.Pane loading={loadingActivities} >\n            <Grid>\n                <Grid.Column width ={16} >\n                    <Header floated = 'left' icon ='calendar' content = {'Activities'} />\n                </Grid.Column>\n                <Grid.Column width = {16} >\n                    <Tab \n                        panes = {panes}\n                        menu = {{secondary: true, pointing: true}}\n                        onTabChange = {(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow ={4} >\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as = {Link}\n                                to = {`/activities/${activity.id}`}\n                                key = {activity.id} \n                            >\n                                <Image \n                                    src = {`/assets/categoryImages/${activity.category}.jpg`}\n                                    style = {{minHeight: 100, objectFit: 'cover'}}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>\n                                        {activity.title}\n                                    </Card.Header>\n                                    <Card.Meta textAlign ='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileCard from \"./ProfileCard\";\n\nexport default observer(function ProfileFollowings() {\n\n    const { profileStore } = useStore();\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4} >\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from \"react\";\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props{\n    imagePreview: string;\n    setCropper:  (cropper:Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height:200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n  setFiles: (files: any) => void\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n\n  const dzStyles = {\n    border: 'dashed 3px #eee',\n    borderColor: '#eee',\n    borderRadius: '5px',\n    paddingTop: '30px',\n    textAlign: 'center' as 'center',\n    height: 200\n  }\n\n  const dzActive = {\n    borderColor: 'green'\n  }\n\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map((file:any)=> Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })))\n  }, [setFiles])\n\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()} style= {isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge' />\n      <Header content='Drop Image here' />\n    </div>\n  )\n}\n","import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Button, Grid, Header } from \"semantic-ui-react\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\n\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {\n                    files && files.length > 0 && (\n                        <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                    )\n                }\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 && <>\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                    <Button.Group>\n                        <Button onClick={onCrop} positive icon='check' loading={loading} />\n                        <Button onClick={() => setFiles([])} positive icon='close' disabled={loading} />\n                    </Button.Group>\n                </>\n                }\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent } from \"react\";\nimport { useState } from \"react\";\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\nimport { Photo, Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header icon='image' content='Photos' floated='left' />\n                    {\n                        isCurrentUser && (\n                            <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                                onClick={() => setAddPhotoMode(!addPhotoMode)} />\n                        )\n                    }\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) :\n                        (\n                            <Card.Group itemsPerRow={5}>\n                                {profile.photos?.map(photo => (\n                                    <Card key={photo.id}>\n                                        <Image src={photo.url} />\n                                        {isCurrentUser && (\n                                            <Button.Group fluid width={2} >\n                                                <Button basic color='green' content='Main'\n                                                    name={'main' + photo.id}\n                                                    disabled={photo.isMain}\n                                                    loading={target === 'main' + photo.id && loading}\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\n                                                />\n                                                <Button basic color='red' icon='trash'\n                                                    loading={target === photo.id && loading}\n                                                    onClick={e => handleDeletePhoto(photo, e)}\n                                                    disabled={photo.isMain}\n                                                    name={photo.id}\n                                                />\n                                            </Button.Group>\n                                        )}\n                                    </Card>\n                                ))}\n                            </Card.Group>\n                        )\n                    }\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileAbout from \"./ProfileAbout\";\nimport ProfileActivities from \"./ProfileActivities\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfilePhotos from \"./ProfilePhotos\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({ profile }: Props) {\n\n    const { profileStore } = useStore();\n\n    const panes = [\n        { menuItem: 'About', render: () => <ProfileAbout /> },\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\n    ];\n\n    return (\n        <Tab\n            menu={{ fluid: true, vertical: true }}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props{\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile} : Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width = {12}>\n                    {/* <Item.Group divided> */}\n                        <Item>\n                            <Item.Image avatar size='small' src= {profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    {/* </Item.Group> */}\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile = {profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../app/layout/LoadingComponents\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileContent from \"./ProfileContent\";\nimport ProfileHeader from \"./ProfileHeader\";\n\nexport default observer(function ProfilePage() {\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>\n                }\n            </Grid.Column>\n        </Grid>\n    );\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\n    const { userStore: { isLoggedIn } } = useStore()\n    return (\n        <Route\n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar'\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/Home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetail from '../../features/activities/details/ActivityDetail';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponents';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if(commonStore.token){\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else{\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading content...' />\n\n  return (\n    <>\n    <ToastContainer position='bottom-right' hideProgressBar />\n    <ModalContainer />\n      <Route exact path=\"/\" component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\n                <PrivateRoute path=\"/activities/:id\" component={ActivityDetail} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const { pathname } = useLocation();\n    \n    useEffect(() => {\n        window.scrollTo(0,0);\n    }, [pathname]);\n    return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory()\n\nReactDOM.render(\n  // <React.StrictMode>\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}